// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `fmt`

/// 将来は OS 別実装（MediaFoundation / AVFoundation / v4l2）に置換
Future<List<CameraInfo>> cameraList() =>
    RustLib.instance.api.crateApiCameraCameraList();

Future<Camera> cameraOpen({
  required int index,
  required int w,
  required int h,
  required int fps,
}) => RustLib.instance.api.crateApiCameraCameraOpen(
  index: index,
  w: w,
  h: h,
  fps: fps,
);

Future<Frame> cameraGrabJpeg({required Camera cam, required int quality}) =>
    RustLib.instance.api.crateApiCameraCameraGrabJpeg(
      cam: cam,
      quality: quality,
    );

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Camera>>
abstract class Camera implements RustOpaqueInterface {}

class CameraInfo {
  final String label;
  final int idx;

  const CameraInfo({required this.label, required this.idx});

  @override
  int get hashCode => label.hashCode ^ idx.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CameraInfo &&
          runtimeType == other.runtimeType &&
          label == other.label &&
          idx == other.idx;
}

class Frame {
  final Uint8List jpeg;
  final int width;
  final int height;

  const Frame({required this.jpeg, required this.width, required this.height});

  @override
  int get hashCode => jpeg.hashCode ^ width.hashCode ^ height.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Frame &&
          runtimeType == other.runtimeType &&
          jpeg == other.jpeg &&
          width == other.width &&
          height == other.height;
}
